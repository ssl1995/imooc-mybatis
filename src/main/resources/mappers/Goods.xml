<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">

    <!--查询-->
    <select id="selectAll" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        order by goods_id desc limit 10;
    </select>

    <!--单个参数，和java包装类名字相同-->
    <select id="selectById" parameterType="integer" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where goods_id = #{id}
        order by goods_id;
    </select>

    <!--多个参数，可以用map-->
    <select id="selectByPriceMap" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where current_price between #{min} and #{max}
        order by current_price limit 0,#{limit}
    </select>

    <!--多表关联，用LinkedHashMap接受，能保证顺序-->
    <!--优点：不用再创建类，使用方便-->
    <!--缺点：没有运行时检查-->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        select g.*, c.category_id, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
    </select>

    <!--结果映射-->
    <resultMap id="rmGoods" type="com.imooc.mybatis.dto.GoodsDto">
        <!--设置主键字段与属性映射-->
        <id property="goods.goodsId" column="goods_id"></id>
        <!--设置非主键字段与属性映射-->
        <result property="goods.title" column="title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>
        <result property="category.categoryId" column="category_id"></result>
        <result property="category.categoryName" column="category_name"></result>
        <result property="category.parentId" column="parent_id"></result>
        <result property="category.categoryLevel" column="category_level"></result>
        <result property="category.categoryOrder" column="category_order"></result>

        <result property="test" column="test"></result>

    </resultMap>

    <select id="selectGoodsDTO" resultMap="rmGoods">
        select g.*, c.*, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
    </select>

    <!--新增-->
    <!--如果需要回填主键Id到实体类:1.selectKey 2.userGeneratedKey-->
    <insert id="insertGood1" parameterType="com.imooc.mybatis.entity.Goods">
        insert into t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        values (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})

        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
            -- selectKey需要显示指定sql
            select last_insert_id();
        </selectKey>
    </insert>

    <!--如果需要回填主键Id到实体类:1.selectKey 2.userGeneratedKey-->
    <insert id="insertGood2" parameterType="com.imooc.mybatis.entity.Goods"
            useGeneratedKeys="true" keyProperty="goodsId" keyColumn="goods_id">
        insert into t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        values (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})
    </insert>

    <!--更新-->
    <update id="updateOne" parameterType="com.imooc.mybatis.entity.Goods">
        update t_goods
        set title           = #{title},
            sub_title       = #{subTitle},
            original_cost   = #{originalCost},
            current_price=#{currentPrice},
            discount=#{discount},
            is_free_delivery=#{isFreeDelivery},
            category_id=#{categoryId}
        where goods_id = #{goodsId}
    </update>

    <!--删除：根据goods_id删除-->
    <delete id="deleteById" parameterType="integer">
        delete
        from t_goods
        where goods_id = ${value}
    </delete>

    <!--SQL注入工具，#和$区别-->
    <select id="selectOfSqlAttack" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
--         where title = #{title}
        where title = ${title}
    </select>

    <resultMap id="rmGoods1" type="com.imooc.mybatis.entity.Goods">
        <!--关联主键-->
        <id property="goodsId" column="goods_id"/>
        <!--1对多集合-->
        <collection property="goodsDetails" column="goods_id" select="goodsDetail.selectByGoodsId"/>
    </resultMap>

    <select id="selectOneToMany" resultMap="rmGoods1">
        select *
        from t_goods limit 0,1
    </select>

    <select id="selectPage" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where current_price &lt; 1000
    </select>

    <!--批量新增-->
    <insert id="batchInsert" parameterType="java.util.List">
        insert into t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            -- item.属性名
            (#{item.title}, #{item.subTitle}, #{item.originalCost}, #{item.currentPrice}, #{item.discount},
            #{item.isFreeDelivery}, #{item.categoryId})
        </foreach>
    </insert>

    <!--批量删除-->
    <delete id="bathDelete" parameterType="java.util.List">
        delete
        from t_goods
        where goods_id in
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>


</mapper>